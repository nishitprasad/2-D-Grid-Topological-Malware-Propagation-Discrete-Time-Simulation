clear;
%For 10 simulation runs
for a = 1:10
%Initializing the parameters
m = 300; n = 300;
p = 0.6; lambda = 10;
nodes_grid = zeros(m,n);
%initial t=0 (tick)
t=0;

%for breaking the loop when z=0 which means the infection spreading has stopped
z = 1;
%to calculate the cumulative count of the number of infected nodes
v=0;
loop_count=0;

%X being time t and Y being I(t)
X = []; Y = [];

%Containing the positions of current infected nodes
M = []; N = [];

%Containing the positions of neigbouring infected nodes
M1 = []; N1 = [];

%initializing the infected nodes at t=0
nodes_grid(1,1) = -1;
nodes_grid(2,2) = -1;
nodes_grid(3,3) = -1;
nodes_grid(4,4) = -1;
nodes_grid(5,5) = -1;
nodes_grid(6,6) = -1;
nodes_grid(7,7) = -1;
nodes_grid(8,8) = -1;
nodes_grid(9,9) = -1;
nodes_grid(10,10) = -1;

for i=1:10
	M1(i)=i;
	N1(i)=i;
end

while z==1
	%generating poisson distribution random variable values
	x = poissrnd(lambda);

	%incrementing tick as per the question
	t = t+x+1;

	%to check how many infected nodes per tick
	count_infected = 0;

	%to check any infected nodes present or not
	check_infection = 0;
	clear M; clear N;
	
	%initializing the positions of current infected nodes per tick		
	M = []; N = [];
	M= M1; N = N1;
	i2=1;j2=1;
	i=1;j=1;
	clear M1; clear N1;
	
	%initializing the positions of infected neighbouring nodes per tick
	M1=[];N1=[];
	
	while (i<=length(M)&& j<=length(N))
	U1 = rand; U2 = rand; U3 = rand; U4 = rand;
		if N(j)>1,
			%if the random value is less than probability p=0.6
			if U1<p
				%if the node is not infected yet
				if nodes_grid(M(i),N(j)-1)==0,

					%Value -1 for infected
					nodes_grid(M(i),N(j)-1) = -1;
					count_infected = count_infected + 1;
					M1(i2)=M(i); N1(j2)=N(j)-1;
					
					%increment the indices of arrays which store the positions of infected neighbour nodes.
					i2 = i2 + 1;
					j2 = j2 + 1;
				end
			end
		end
		if M(i)>1,
			if U2<p,
				if nodes_grid(M(i)-1,N(j))==0
					nodes_grid(M(i)-1,N(j)) = -1;
					count_infected = count_infected + 1;
					M1(i2)=M(i)-1; N1(j2)=N(j);
					i2 = i2 + 1;
					j2 = j2 + 1;
				end
			end
		end
		if N(j)<n,
			if U3<p,
			    if nodes_grid(M(i),N(j)+1)==0
				nodes_grid(M(i),N(j)+1) = -1;
				count_infected = count_infected + 1;
				M1(i2)=M(i); N1(j2)=N(j)+1;
				i2 = i2 + 1;
				j2 = j2 + 1;
			    end
			end
		end
		if M(i)<m,
			if U4<p,
				if nodes_grid(M(i)+1,N(j))==0
					nodes_grid(M(i)+1,N(j)) = -1;
					count_infected = count_infected + 1;
					M1(i2)=M(i)+1; N1(j2)=N(j);
					i2 = i2 + 1;
					j2 = j2 + 1;
				end
			end
		end
		nodes_grid(M(i),N(j)) = 1;
		i = i+1;
		j = j+1;
	end

	for h=1:m,
		for g=1:n,
			if nodes_grid(h,g)==-1,
	    			check_infection= check_infection + 1;
			end
    		end
	end

	%if the infection spreading stops
	if check_infection == 0,
    		z=0;%leave the simulation
	else    
		loop_count = loop_count + 1;
		X(loop_count)= t;
		v = v + count_infected;
		Y(loop_count)= v;
	end
end

%mean value of Y which is in fact, I(t)
I_Y(a) = mean(Y);
end

%10 simulation axis plotting
I_X = 1:10;

plot(I_X,I_Y, 'ro-');
xlabel('Simulation runs'); ylabel('avg(I(t))');
title('Topological Malware Propagation Discrete-time Simulation ');
